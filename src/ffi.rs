#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const kDNSServiceMaxServiceName: u32 = 64;
pub const kDNSServiceMaxDomainName: u32 = 1005;
pub const kDNSServiceInterfaceIndexAny: u32 = 0;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DNSServiceRef_t {
    _unused: [u8; 0],
}
pub type DNSServiceRef = *mut _DNSServiceRef_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DNSRecordRef_t {
    _unused: [u8; 0],
}
pub type DNSRecordRef = *mut _DNSRecordRef_t;
pub const kDNSServiceFlagsMoreComing: _bindgen_ty_1 = 1;
pub const kDNSServiceFlagsAdd: _bindgen_ty_1 = 2;
pub const kDNSServiceFlagsDefault: _bindgen_ty_1 = 4;
pub const kDNSServiceFlagsNoAutoRename: _bindgen_ty_1 = 8;
pub const kDNSServiceFlagsShared: _bindgen_ty_1 = 16;
pub const kDNSServiceFlagsUnique: _bindgen_ty_1 = 32;
pub const kDNSServiceFlagsBrowseDomains: _bindgen_ty_1 = 64;
pub const kDNSServiceFlagsRegistrationDomains: _bindgen_ty_1 = 128;
pub const kDNSServiceFlagsLongLivedQuery: _bindgen_ty_1 = 256;
pub const kDNSServiceFlagsAllowRemoteQuery: _bindgen_ty_1 = 512;
pub const kDNSServiceFlagsForceMulticast: _bindgen_ty_1 = 1024;
pub const kDNSServiceFlagsReturnCNAME: _bindgen_ty_1 = 2048;
pub type _bindgen_ty_1 = u32;
pub const kDNSServiceClass_IN: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
pub const kDNSServiceType_A: _bindgen_ty_3 = 1;
pub const kDNSServiceType_NS: _bindgen_ty_3 = 2;
pub const kDNSServiceType_MD: _bindgen_ty_3 = 3;
pub const kDNSServiceType_MF: _bindgen_ty_3 = 4;
pub const kDNSServiceType_CNAME: _bindgen_ty_3 = 5;
pub const kDNSServiceType_SOA: _bindgen_ty_3 = 6;
pub const kDNSServiceType_MB: _bindgen_ty_3 = 7;
pub const kDNSServiceType_MG: _bindgen_ty_3 = 8;
pub const kDNSServiceType_MR: _bindgen_ty_3 = 9;
pub const kDNSServiceType_NULL: _bindgen_ty_3 = 10;
pub const kDNSServiceType_WKS: _bindgen_ty_3 = 11;
pub const kDNSServiceType_PTR: _bindgen_ty_3 = 12;
pub const kDNSServiceType_HINFO: _bindgen_ty_3 = 13;
pub const kDNSServiceType_MINFO: _bindgen_ty_3 = 14;
pub const kDNSServiceType_MX: _bindgen_ty_3 = 15;
pub const kDNSServiceType_TXT: _bindgen_ty_3 = 16;
pub const kDNSServiceType_RP: _bindgen_ty_3 = 17;
pub const kDNSServiceType_AFSDB: _bindgen_ty_3 = 18;
pub const kDNSServiceType_X25: _bindgen_ty_3 = 19;
pub const kDNSServiceType_ISDN: _bindgen_ty_3 = 20;
pub const kDNSServiceType_RT: _bindgen_ty_3 = 21;
pub const kDNSServiceType_NSAP: _bindgen_ty_3 = 22;
pub const kDNSServiceType_NSAP_PTR: _bindgen_ty_3 = 23;
pub const kDNSServiceType_SIG: _bindgen_ty_3 = 24;
pub const kDNSServiceType_KEY: _bindgen_ty_3 = 25;
pub const kDNSServiceType_PX: _bindgen_ty_3 = 26;
pub const kDNSServiceType_GPOS: _bindgen_ty_3 = 27;
pub const kDNSServiceType_AAAA: _bindgen_ty_3 = 28;
pub const kDNSServiceType_LOC: _bindgen_ty_3 = 29;
pub const kDNSServiceType_NXT: _bindgen_ty_3 = 30;
pub const kDNSServiceType_EID: _bindgen_ty_3 = 31;
pub const kDNSServiceType_NIMLOC: _bindgen_ty_3 = 32;
pub const kDNSServiceType_SRV: _bindgen_ty_3 = 33;
pub const kDNSServiceType_ATMA: _bindgen_ty_3 = 34;
pub const kDNSServiceType_NAPTR: _bindgen_ty_3 = 35;
pub const kDNSServiceType_KX: _bindgen_ty_3 = 36;
pub const kDNSServiceType_CERT: _bindgen_ty_3 = 37;
pub const kDNSServiceType_A6: _bindgen_ty_3 = 38;
pub const kDNSServiceType_DNAME: _bindgen_ty_3 = 39;
pub const kDNSServiceType_SINK: _bindgen_ty_3 = 40;
pub const kDNSServiceType_OPT: _bindgen_ty_3 = 41;
pub const kDNSServiceType_TKEY: _bindgen_ty_3 = 249;
pub const kDNSServiceType_TSIG: _bindgen_ty_3 = 250;
pub const kDNSServiceType_IXFR: _bindgen_ty_3 = 251;
pub const kDNSServiceType_AXFR: _bindgen_ty_3 = 252;
pub const kDNSServiceType_MAILB: _bindgen_ty_3 = 253;
pub const kDNSServiceType_MAILA: _bindgen_ty_3 = 254;
pub const kDNSServiceType_ANY: _bindgen_ty_3 = 255;
pub type _bindgen_ty_3 = u32;
pub const kDNSServiceErr_NoError: _bindgen_ty_4 = 0;
pub const kDNSServiceErr_Unknown: _bindgen_ty_4 = -65537;
pub const kDNSServiceErr_NoSuchName: _bindgen_ty_4 = -65538;
pub const kDNSServiceErr_NoMemory: _bindgen_ty_4 = -65539;
pub const kDNSServiceErr_BadParam: _bindgen_ty_4 = -65540;
pub const kDNSServiceErr_BadReference: _bindgen_ty_4 = -65541;
pub const kDNSServiceErr_BadState: _bindgen_ty_4 = -65542;
pub const kDNSServiceErr_BadFlags: _bindgen_ty_4 = -65543;
pub const kDNSServiceErr_Unsupported: _bindgen_ty_4 = -65544;
pub const kDNSServiceErr_NotInitialized: _bindgen_ty_4 = -65545;
pub const kDNSServiceErr_AlreadyRegistered: _bindgen_ty_4 = -65547;
pub const kDNSServiceErr_NameConflict: _bindgen_ty_4 = -65548;
pub const kDNSServiceErr_Invalid: _bindgen_ty_4 = -65549;
pub const kDNSServiceErr_Firewall: _bindgen_ty_4 = -65550;
pub const kDNSServiceErr_Incompatible: _bindgen_ty_4 = -65551;
pub const kDNSServiceErr_BadInterfaceIndex: _bindgen_ty_4 = -65552;
pub const kDNSServiceErr_Refused: _bindgen_ty_4 = -65553;
pub const kDNSServiceErr_NoSuchRecord: _bindgen_ty_4 = -65554;
pub const kDNSServiceErr_NoAuth: _bindgen_ty_4 = -65555;
pub const kDNSServiceErr_NoSuchKey: _bindgen_ty_4 = -65556;
pub const kDNSServiceErr_NATTraversal: _bindgen_ty_4 = -65557;
pub const kDNSServiceErr_DoubleNAT: _bindgen_ty_4 = -65558;
pub const kDNSServiceErr_BadTime: _bindgen_ty_4 = -65559;
pub type _bindgen_ty_4 = i32;
pub type DNSServiceFlags = u32;
pub type DNSServiceErrorType = i32;
extern "C" {
    /// Unix Domain Socket access, DNSServiceRef deallocation, and data processing functions
    ///
    pub fn DNSServiceRefSockFD(sdRef: DNSServiceRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DNSServiceProcessResult(sdRef: DNSServiceRef) -> DNSServiceErrorType;
}
extern "C" {
    pub fn DNSServiceRefDeallocate(sdRef: DNSServiceRef);
}
/// Domain Enumeration
///
pub type DNSServiceDomainEnumReply = ::std::option::Option<
    unsafe extern "C" fn(
        sdRef: DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        errorCode: DNSServiceErrorType,
        replyDomain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DNSServiceEnumerateDomains(
        sdRef: *mut DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        callBack: DNSServiceDomainEnumReply,
        context: *mut ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
///  Service Registration
///
pub type DNSServiceRegisterReply = ::std::option::Option<
    unsafe extern "C" fn(
        sdRef: DNSServiceRef,
        flags: DNSServiceFlags,
        errorCode: DNSServiceErrorType,
        name: *const ::std::os::raw::c_char,
        regtype: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DNSServiceRegister(
        sdRef: *mut DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        name: *const ::std::os::raw::c_char,
        regtype: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        host: *const ::std::os::raw::c_char,
        port: u16,
        txtLen: u16,
        txtRecord: *const ::std::os::raw::c_void,
        callBack: DNSServiceRegisterReply,
        context: *mut ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
extern "C" {
    pub fn DNSServiceAddRecord(
        sdRef: DNSServiceRef,
        RecordRef: *mut DNSRecordRef,
        flags: DNSServiceFlags,
        rrtype: u16,
        rdlen: u16,
        rdata: *const ::std::os::raw::c_void,
        ttl: u32,
    ) -> DNSServiceErrorType;
}
extern "C" {
    pub fn DNSServiceUpdateRecord(
        sdRef: DNSServiceRef,
        RecordRef: DNSRecordRef,
        flags: DNSServiceFlags,
        rdlen: u16,
        rdata: *const ::std::os::raw::c_void,
        ttl: u32,
    ) -> DNSServiceErrorType;
}
extern "C" {
    pub fn DNSServiceRemoveRecord(
        sdRef: DNSServiceRef,
        RecordRef: DNSRecordRef,
        flags: DNSServiceFlags,
    ) -> DNSServiceErrorType;
}
///  Service Discovery
///
pub type DNSServiceBrowseReply = ::std::option::Option<
    unsafe extern "C" fn(
        sdRef: DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        errorCode: DNSServiceErrorType,
        serviceName: *const ::std::os::raw::c_char,
        regtype: *const ::std::os::raw::c_char,
        replyDomain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DNSServiceBrowse(
        sdRef: *mut DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        regtype: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        callBack: DNSServiceBrowseReply,
        context: *mut ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
pub type DNSServiceResolveReply = ::std::option::Option<
    unsafe extern "C" fn(
        sdRef: DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        errorCode: DNSServiceErrorType,
        fullname: *const ::std::os::raw::c_char,
        hosttarget: *const ::std::os::raw::c_char,
        port: u16,
        txtLen: u16,
        txtRecord: *const ::std::os::raw::c_uchar,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DNSServiceResolve(
        sdRef: *mut DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        name: *const ::std::os::raw::c_char,
        regtype: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        callBack: DNSServiceResolveReply,
        context: *mut ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
extern "C" {
    ///  Special Purpose Calls (most applications will not use these)
    ///
    pub fn DNSServiceCreateConnection(sdRef: *mut DNSServiceRef) -> DNSServiceErrorType;
}
pub type DNSServiceRegisterRecordReply = ::std::option::Option<
    unsafe extern "C" fn(
        sdRef: DNSServiceRef,
        RecordRef: DNSRecordRef,
        flags: DNSServiceFlags,
        errorCode: DNSServiceErrorType,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DNSServiceRegisterRecord(
        sdRef: DNSServiceRef,
        RecordRef: *mut DNSRecordRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        fullname: *const ::std::os::raw::c_char,
        rrtype: u16,
        rrclass: u16,
        rdlen: u16,
        rdata: *const ::std::os::raw::c_void,
        ttl: u32,
        callBack: DNSServiceRegisterRecordReply,
        context: *mut ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
pub type DNSServiceQueryRecordReply = ::std::option::Option<
    unsafe extern "C" fn(
        DNSServiceRef: DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        errorCode: DNSServiceErrorType,
        fullname: *const ::std::os::raw::c_char,
        rrtype: u16,
        rrclass: u16,
        rdlen: u16,
        rdata: *const ::std::os::raw::c_void,
        ttl: u32,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn DNSServiceQueryRecord(
        sdRef: *mut DNSServiceRef,
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        fullname: *const ::std::os::raw::c_char,
        rrtype: u16,
        rrclass: u16,
        callBack: DNSServiceQueryRecordReply,
        context: *mut ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
extern "C" {
    pub fn DNSServiceReconfirmRecord(
        flags: DNSServiceFlags,
        interfaceIndex: u32,
        fullname: *const ::std::os::raw::c_char,
        rrtype: u16,
        rrclass: u16,
        rdlen: u16,
        rdata: *const ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
extern "C" {
    ///  General Utility Functions
    ///
    pub fn DNSServiceConstructFullName(
        fullName: *mut ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
        regtype: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _TXTRecordRef_t {
    pub PrivateData: [::std::os::raw::c_char; 16usize],
    pub ForceNaturalAlignment: *mut ::std::os::raw::c_char,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout__TXTRecordRef_t() {
    assert_eq!(
        ::std::mem::size_of::<_TXTRecordRef_t>(),
        16usize,
        concat!("Size of: ", stringify!(_TXTRecordRef_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_TXTRecordRef_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_TXTRecordRef_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TXTRecordRef_t>())).PrivateData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TXTRecordRef_t),
            "::",
            stringify!(PrivateData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TXTRecordRef_t>())).ForceNaturalAlignment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TXTRecordRef_t),
            "::",
            stringify!(ForceNaturalAlignment)
        )
    );
}
pub type TXTRecordRef = _TXTRecordRef_t;
extern "C" {
    pub fn TXTRecordCreate(
        txtRecord: *mut TXTRecordRef,
        bufferLen: u16,
        buffer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn TXTRecordDeallocate(txtRecord: *mut TXTRecordRef);
}
extern "C" {
    pub fn TXTRecordSetValue(
        txtRecord: *mut TXTRecordRef,
        key: *const ::std::os::raw::c_char,
        valueSize: u8,
        value: *const ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
extern "C" {
    pub fn TXTRecordRemoveValue(
        txtRecord: *mut TXTRecordRef,
        key: *const ::std::os::raw::c_char,
    ) -> DNSServiceErrorType;
}
extern "C" {
    pub fn TXTRecordGetLength(txtRecord: *const TXTRecordRef) -> u16;
}
extern "C" {
    pub fn TXTRecordGetBytesPtr(txtRecord: *const TXTRecordRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn TXTRecordContainsKey(
        txtLen: u16,
        txtRecord: *const ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TXTRecordGetValuePtr(
        txtLen: u16,
        txtRecord: *const ::std::os::raw::c_void,
        key: *const ::std::os::raw::c_char,
        valueLen: *mut u8,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn TXTRecordGetCount(txtLen: u16, txtRecord: *const ::std::os::raw::c_void) -> u16;
}
extern "C" {
    pub fn TXTRecordGetItemAtIndex(
        txtLen: u16,
        txtRecord: *const ::std::os::raw::c_void,
        index: u16,
        keyBufLen: u16,
        key: *mut ::std::os::raw::c_char,
        valueLen: *mut u8,
        value: *mut *const ::std::os::raw::c_void,
    ) -> DNSServiceErrorType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DNS_SD_CompileTimeAssertionChecks {
    pub assert0: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_DNS_SD_CompileTimeAssertionChecks() {
    assert_eq!(
        ::std::mem::size_of::<DNS_SD_CompileTimeAssertionChecks>(),
        1usize,
        concat!("Size of: ", stringify!(DNS_SD_CompileTimeAssertionChecks))
    );
    assert_eq!(
        ::std::mem::align_of::<DNS_SD_CompileTimeAssertionChecks>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(DNS_SD_CompileTimeAssertionChecks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DNS_SD_CompileTimeAssertionChecks>())).assert0 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DNS_SD_CompileTimeAssertionChecks),
            "::",
            stringify!(assert0)
        )
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
